<?php

namespace app\controllers;

use Yii;
use yii\db\Query;
use yii\filters\AccessControl;
use yii\helpers\ArrayHelper;
use yii\web\Controller;
use yii\web\Response;
use yii\web\UploadedFile;
use app\models\UserModel;
use app\models\RoleModel;
use app\models\GroupsModel;
use app\models\TaskModel;
use app\models\TimeShiftModel;
use yii\web\User;

class SiteController extends Controller
{
    public function behaviors()
    {
        return [
            'access' => [
                'class' => AccessControl::className(),
                'rules' => [
                    [
                        'actions' => ['login'],
                        'allow' => true,
                        'roles' => ['?'], // is not logged in
                    ],
                    [
                        'actions' => ['index', 'logout'],
                        'allow' => true,
                        'roles' => ['@'], // in logged in
                    ],
                    [
                        'allow' => true,
                        'roles' => ['@'],
                        'matchCallback' => function($rule, $action) {
                            return UserModel::hasAdminAccess();
                        }
                    ],
                ],
            ],
        ];
    }

    public function beforeAction($action)
    {
        $this->enableCsrfValidation = false;

        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    public function actions()
    {
        return [
            'error' => [
                'class' => 'yii\web\ErrorAction',
            ],
        ];
    }

    public function actionIndex($date = null)
    {
        $date = TimeShiftModel::get_pn_days($date);

        $time_shifts = TimeShiftModel::get_timeshifts_with_groups($date['this']);
        $time_shifts = TimeShiftModel::divide_time_shifts_data($time_shifts);

        return $this->render('index', [
            'time_shifts' => $time_shifts,
            'date' => $date,
            'thisDate' => date("l, d F", $date['time']),
        ]);
    }

    public function actionLogin()
    {
        $this->layout = 'login';
        $model = new UserModel(['scenario' => UserModel::SCENARIO_LOGIN]);

        // check if login info send
        if ($model->load(Yii::$app->request->post()) && $model->validate()) {
            $user = $model->check_user_login();
            if ($user) {
                Yii::$app->user->login($user);
                return $this->goHome();
            }
            else {
                Yii::$app->session->setFlash("no_success");
            }
        }

        return $this->render('login', [
            'model' => $model,
        ]);
    }

    public function actionLogout()
    {
        Yii::$app->user->logout();

        return $this->goHome();
    }

    // experts function
    public function actionExperts()
    {
        $search_model = new UserModel(['scenario' => UserModel::SCENARIO_SEARCH]);
        $search_model->load(Yii::$app->request->get());

        $experts = UserModel::get_experts_data($search_model->fname);

        return $this->render('experts', [
            'experts' => $experts,
            'search_model' => $search_model
        ]);
    }

    public function actionAddExpert() {

        $model = new UserModel(['scenario' => UserModel::SCENARIO_ADD_EXPERT]);

        // check information has sent?
        if (Yii::$app->request->isPost) {
            if ($model->load(Yii::$app->request->post())) {
                // handel and complete upload file
                $model->avatar_pic = UploadedFile::getInstance($model, 'avatar_pic');
                if ($model->validate()) {
                    $model->upload_avatar();
                    $model->save();
                    Yii::$app->session->setFlash('saved');
                    return $this->refresh();
                }
            }
        }

        // get all roles for using in the form
        $roles = RoleModel::find()->all();

        return $this->render('add-expert', [
            'model' => $model,
            'roles' => $roles
        ]);

    }

    public function actionDeleteExpert($id) {
        $model = UserModel::findOne($id);
        if ($model->delete()) {
            Yii::$app->session->setFlash("deleted");
        }
        return $this->redirect(['site/experts']);
    }

    public function actionEditExpert($id) {
        $model = UserModel::findOne($id);
        $model->scenario = UserModel::SCENARIO_ADD_EXPERT;


        // check information has sent?
        if (Yii::$app->request->isPost) {
            // handle uploaded file
            if ($model->load(Yii::$app->request->post())) {
                // complete upload file
                $model->avatar_pic = UploadedFile::getInstance($model, 'avatar_pic');
                if ($model->validate()) {
                    $model->upload_avatar();
                    $model->save(false);
                    Yii::$app->session->setFlash('saved');
                    return $this->refresh();
                }
            }
        }

        // get all roles for using in the form
        $roles = RoleModel::find()->all();

        return $this->render('add-expert', [
            'model' => $model,
            'roles' => $roles
        ]);
    }

    // role functions
    public function actionRoles() {
        $roles = RoleModel::find()->where("id != ".RoleModel::MAIN_ADMIN_ID)->all();
        return $this->render('roles', [
            'roles' => $roles,
        ]);
    }

    public function actionAddRole() {
        $model = new RoleModel();

        if (Yii::$app->request->isPost) {
            if ($model->load(Yii::$app->request->post()) && $model->validate()) {
                $model->save(false);
                Yii::$app->session->setFlash('saved');
                return $this->refresh();
            }
        }

        return $this->render('add-role', [
            'model' => $model
        ]);
    }

    public function actionEditRole($id) {
        $model = RoleModel::findOne($id);

        if (Yii::$app->request->isPost) {
            if ($model->load(Yii::$app->request->post()) && $model->validate()) {
                $model->save(false);
                Yii::$app->session->setFlash('saved');
                return $this->refresh();
            }
        }

        return $this->render('add-role', [
            'model' => $model
        ]);
    }

    public function actionDeleteRole($id) {
        $model = RoleModel::findOne($id);
        if ($model->delete()) {
            Yii::$app->session->setFlash("deleted");
        }
        return $this->redirect(['site/roles']);
    }

    // work group actions
    public function actionGroups() {
        $groups = GroupsModel::find()->all();

        return $this->render('groups', [
            'groups' => $groups,
        ]);
    }

    public function actionAddGroups() {
        $model = new GroupsModel();

        if (Yii::$app->request->isPost) {
            if ($model->load(Yii::$app->request->post()) && $model->validate()) {
                $model->save(false);
                Yii::$app->session->setFlash('saved');
                return $this->refresh();
            }
        }

        return $this->render('add-group', [
            'model' => $model,
        ]);
    }

    public function actionEditGroup($id) {
        $model = GroupsModel::findOne($id);

        if (Yii::$app->request->isPost) {
            if ($model->load(Yii::$app->request->post()) && $model->validate()) {
                $model->save(false);
                Yii::$app->session->setFlash('saved');
                return $this->refresh();
            }
        }

        return $this->render('add-group', [
            'model' => $model,
        ]);
    }

    public function actionDeleteGroup($id) {
        $model = GroupsModel::findOne($id);
        if ($model->delete()) {
            Yii::$app->session->setFlash("deleted");
        }
        return $this->redirect(['site/groups']);
    }

    public function actionSchedules() {
        $groups = GroupsModel::find()->all();
        $time_shifts = TimeShiftModel::find()->orderBy("date,from_time ASC")->all();
        $week_days = TimeShiftModel::get_week_days();

        $model = new TimeShiftModel();

        return $this->render('schedules', [
            'groups' => $groups,
            'week_days' => $week_days,
            'time_shifts' => $time_shifts,
            'model' => $model,
        ]);
    }

    public function actionSaveTimeShift() {
        $model = new TimeShiftModel();
        $model->work_group_id = Yii::$app->request->post("group");
        $model->from_time = Yii::$app->request->post("start");
        $model->to_time = Yii::$app->request->post("end");
        $model->date = Yii::$app->request->post("date");

        // check existing time shift in this date
        if (!TimeShiftModel::findOne([
            'work_group_id' => $model->work_group_id,
            'date' => $model->date
        ])) {
            $model->save(false);
            $status = 'success';
        }
        else {
            $status = 'failed';
        }

        Yii::$app->response->format = Response::FORMAT_JSON;
        return [
            "status" => $status
        ];
    }

    public function actionAddExpertToGroup($group_id) {
        $group = GroupsModel::findOne($group_id);
        $count = $group->getTasks()->count();
        $tasks = ArrayHelper::map($group->tasks, 'user_id', 'id');

        $users = UserModel::find()->all();

        if (Yii::$app->request->isPost) {
            $usersTask = Yii::$app->request->post('experts');
            foreach ($usersTask as $user) {
                // check the count of users is not more than 4
                if ($count >= 4) {
                    Yii::$app->session->setFlash('countError');
                    return $this->refresh();
                }

                $taskModel = new TaskModel();
                $taskModel->attributes = [
                    'work_group_id' => $group_id,
                    'user_id' => $user
                ];
                $taskModel->save();
                $count++;
            }

            Yii::$app->session->setFlash('saved');
            return $this->refresh();
        }

        return $this->render("tasks", [
            'group' => $group,
            'users' => $users,
            'tasks' => $tasks
        ]);
    }

    public function actionDownloadBackup() {
        // create content for download backup
        $tables = Yii::$app->db->schema->getTableSchemas();
        $contents = "::version:: 0.0.1 \n\n";
        foreach ($tables as $table) {
            $contents .= "::table:: ".$table->name."\n";
            $rows = (new Query())->select("*")->from($table->name)->all();
            foreach ($rows as $row) {
                $contents .= rtrim(implode($row, ','), ',');
                $contents .= "\n";
            }
            $contents .= "\n\n";
        }
        return Yii::$app->response->sendContentAsFile(
            $contents,
            'backup '.date("Y-m-d").'.csv',
            ['mimeType' => 'text/csv']
        );
    }
}