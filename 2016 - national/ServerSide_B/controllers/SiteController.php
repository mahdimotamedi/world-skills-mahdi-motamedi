<?php

namespace app\controllers;

use Yii;
use yii\base\Model;
use yii\filters\AccessControl;
use yii\helpers\ArrayHelper;
use yii\web\Controller;
use yii\filters\VerbFilter;
use app\models\BookModel;
use app\models\CountryModel;
use app\models\DaysModel;
use app\models\DiningModel;
use app\models\GuestModel;

class SiteController extends Controller
{
    /*public function behaviors()
    {
        return [
            'access' => [
                'class' => AccessControl::className(),
                'only' => ['logout'],
                'rules' => [
                    [
                        'actions' => ['logout'],
                        'allow' => true,
                        'roles' => ['@'],
                    ],
                ],
            ],
        ];
    }*/

    /**
     * @inheritdoc
     */
    public function actions()
    {
        return [
            'error' => [
                'class' => 'yii\web\ErrorAction',
            ]
        ];
    }

    public function beforeAction($action)
    {
        $this->enableCsrfValidation = false;

        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    public function actionIndex()
    {
        return $this->render('index');
    }

    public function actionStartBooking()
    {
        $model = new GuestModel(['scenario' => GuestModel::SCENARIO_START_BOOKING]);
        $countries = CountryModel::find()->all();

        if ($model->load(Yii::$app->request->post()) && $model->save()) {

            // set session for continue reserve
            Yii::$app->session->set('guest_id', $model->id);

            // check the mod of request
            if (Yii::$app->request->post('book-individual')) {
                // if this request is for individual
                return $this->redirect(['site/book-individual']);
            }
            else if (Yii::$app->request->post('book-group')) {
                // if this request is for group
                return $this->redirect(['site/book-group']);
            }
        }

        return $this->render('start-booking', [
            'model' => $model,
            'countries' => $countries,
        ]);
    }

    public function actionBookIndividual()
    {
        $days = DaysModel::find()->orderBy('holding_date ASC')->all();
        $dining = DiningModel::find()->orderBy("hours ASC")->all();

        return $this->render('book-individual', [
            'days' => $days,
            'dining' => $dining,
        ]);
    }

    public function actionBookGroup()
    {
        $days = DaysModel::find()->orderBy('holding_date ASC')->all();
        $dining = DiningModel::find()->orderBy("hours ASC")->all();
        $countries = ArrayHelper::map(CountryModel::find()->all(), 'id', 'fullName');

        return $this->render('book-group', [
            'days' => $days,
            'dining' => $dining,
            'countries' => $countries,
        ]);
    }

    public function actionSetBooks() {
        $guest = GuestModel::findOne(Yii::$app->session->get('guest_id'));
        $books_req = Yii::$app->request->post('book');
        if (!$books_req)
            return $this->goBack(Yii::$app->request->referrer);

        $books = [];
        foreach ($books_req as $index => $book) {
            $parts = explode('-', $index);
            foreach ($book as $item) {
                $bookModel = new BookModel();
                $bookModel->guest_name = @$item['guest_name'] ? $item['guest_name'] : $guest->name ;
                $bookModel->country_id = @$item['country'] ? $item['country'] : $guest->country_id ;
                $bookModel->day_id = $parts[0];
                $bookModel->dining_id = $parts[1];
                $bookModel->guest_id = $guest->id;

                $books[] = $bookModel;
            }
        }

        foreach ($books as $model) {
            $model->save(false);
        }

        return $this->render('confirmation', [
            'guest' => $guest,
            'books' => $books,
        ]);
    }
}
